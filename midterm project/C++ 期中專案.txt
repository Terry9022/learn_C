#include <iostream>
#include <algorithm>
#include <cmath>
using namespace std;

const int kMaxDay = 16800;

int find_best_fix_day(float a, int b, int c, float p, int T, float L, int n, float q[], int d[], int &best_fix_product) {
    // 找出最佳修理日期，並更改最佳修理日期在哪個編號的產品前
    int min_delay_sum = 99999999, best_fix_day = 0;
    best_fix_product = -1;
    int record_no_fix_day = -1;
    for (int i = 0; i <= T - c; i++) { // i be day of fix
        if (i == record_no_fix_day)
            break;
        int day = 0;
        int delay_sum = 0;
        float temp_p = p;
        int record_fix_product = 0;
 
        bool has_fixed = false;
        for (int j = 0; j < n; j++) { // j be label of product
            int sub_day = 0;
            int start = day - sub_day + 1;
            if (start == i && i != 0) {
                temp_p = 100 + b;
                day += c;
                has_fixed = true;
                record_fix_product = j;
            }
             
            float sum = 0;
            while (sum < q[j]) {
                temp_p -= b;
                temp_p = max(temp_p, L);
                sum += a * temp_p / 100;
                day++;
                sub_day++;
            }
            delay_sum += max(0 , day - d[j]);
        }
 
        if (min_delay_sum > delay_sum && (has_fixed || i == 0)) {
            min_delay_sum = delay_sum;
            best_fix_day = i;
            best_fix_product = record_fix_product;
        }

        if (i == 0)
            record_no_fix_day = day;
    }
 
    return best_fix_day;
}

int main() {

    //創立變數 讀入資料
    int machine_num =  0; //機台總數
    int order_num = 0; //訂單總數,
    int fixing_limit = 0; //同時間維修機台上限

    double machine_data[50][5] = {0}; //每機台的各項狀況，同一橫列中左至右依序為該機台的理論生產速率、衰減率、維修所需時數、初始產率、產率下限

    double order_data[1000][3] = {0};//每一橫列兩個數字，第一個存該訂單需求量，第二個存該訂單截止時刻，第三個存訂單編號
    //（這個陣列的位置代表排名，不代表編號，因此第0列有資料）


    cin >> machine_num >> order_num >> fixing_limit;


    for (int i = 0; i < machine_num; i++){
        cin >> machine_data[i][0] >> machine_data[i][1] >> machine_data[i][2] >> machine_data[i][3] >> machine_data[i][4];
    }

    float original_order_data_q[1000] = {0}; // 因為之後會排序，設置次陣列表示原本的訂單編號與產品數量之聯繫
    int original_order_data_d[1000] = {0}; // 因之後會排序，設置次陣列表示原本的訂單編號與產品期限之聯繫
    for (int i = 0; i < order_num; i++){
        cin >> order_data[i][0] >> order_data[i][1];
        original_order_data_q[i] = order_data[i][0];
        original_order_data_d[i] = order_data[i][1];
        order_data[i][2] = static_cast<double>(i + 1);
    }

    // 重新安排訂單順序 使用sort的stable特性，也就是說先排序過的東西，再經過排序如果同等時其順序仍不變
    int** temp_matrix = new int*[order_num];
    for(int i = 0; i < order_num; i++)
        temp_matrix[i] = new int[3];

    //複製陣列
    for (int i = 0; i < order_num; i++){
        temp_matrix[i][0]=static_cast<int>(order_data[i][0]);
        temp_matrix[i][1]=static_cast<int>(order_data[i][1]);
        temp_matrix[i][2]=static_cast<int>(order_data[i][2]);
    }

    sort(temp_matrix, temp_matrix + order_num, [](int* a, int* b){
        return a[0] < b[0]; // 升序排列訂單數量
    });

    sort(temp_matrix, temp_matrix + order_num, [](int* a, int* b){
        return a[1] < b[1]; // 升序排列訂單期限
    });

    for (int i = 0; i < order_num; i++){
        order_data[i][0] = temp_matrix[i][0];
        order_data[i][1] = temp_matrix[i][1];
        order_data[i][2] = temp_matrix[i][2];
    }

    // 使用完畢後清除記憶體和pointer
    for(int i = 0; i < order_num; i++){
        delete[] temp_matrix[i];
        temp_matrix[i]=nullptr;
    }
    delete[] temp_matrix;

    // 現在order_data已經經過排序了


    //算每張機台的能力值，以（a * (p + L) / 2）當作能力值，也就是總量與底線的平均值

    double machine_data_power[50][2] = {0};  //每張機台的能力值陣列，第0行存機台編號，第1行存機台能力
    for (int i = 0; i < machine_num; i++){
        //（a * (p + L) / 2）
        double power =  machine_data[i][0] * ((machine_data[i][3] + machine_data[i][4])/2);
        machine_data_power[i][0] = i + 1;
        machine_data_power[i][1] = power;
    }

    //將能力進行排序
    double temp[2] = {0};
    for (int i = 0; i < machine_num; i++) {
        for (int j = 0; j < machine_num - i - 1; j++) {
            bool powerful = machine_data_power[j][1] < machine_data_power[j + 1][1];
            if (powerful){
                temp[0] = machine_data_power[j][0];
                temp[1] = machine_data_power[j][1];
                machine_data_power[j][0] = machine_data_power[j + 1][0];
                machine_data_power[j][1] = machine_data_power[j + 1][1];
                machine_data_power[j + 1][0] = temp[0];
                machine_data_power[j + 1][1] = temp[1];
            }
        }
    }

    //接著我們找出能力值的總和，單一能力值/總能力值即為要拿的訂單數比例，若小於1/總訂單數則定為1/總訂單數
    double totalPower = 0;
    for (int i = 0; i < machine_num; i++) {
        totalPower += machine_data_power[i][1];
    }
    for (int i = 0; i < machine_num; i++) {
        if (machine_data_power[i][1] / totalPower < 1.0 / order_num)
            machine_data_power[i][1] = 1.0 / order_num;
        else
            machine_data_power[i][1] /= totalPower;
    }
    //此時machine_data_power由強到弱存下了每機台對應的比例

    int part_one_answer[50][1000] = {0}; //此為結果陣列，一樣沒用到第0列
    //接著分出每機台要做的訂單張數，在終止點存下1001（因為訂單沒有第1001張）
    for (int i = 0; i < machine_num; i++) {
        int machine_load = static_cast<int>(round(order_num * machine_data_power[i][1]));
        for (int j = machine_load + 1; j < order_num; j++) {
            part_one_answer[static_cast<int>(machine_data_power[i][0])][j] = 1001;
        }
    }
    
    //接著開始分配訂單，最外面迴圈選的是結果陣列的直排，內圈選機台
    //概念上來說我們輪流發每台機器的第一張訂單，接著發每台的第二張，依此類推，遇到1001就不發
    int order_i = 0; //用來表示目前發到第幾張訂單（這裡的第幾是指排名上的第幾）
    for (int i = 0; i < order_num; i++) {
        for (int j = 0; j < machine_num; j++) {
            if (part_one_answer[j][i] != 1001){
                part_one_answer[j][i] = static_cast<int>(order_data[order_i][2]);
                order_i++;
            }
            if (order_i == order_num)
                break;
        }
        if (order_i == order_num)
            break;
    }

    int real_part_one_answer[50][1000] = {0}; // part_one_answer 但以-1結尾
    int product_num_of_machine[50] = {0}; // 記錄每個機台處理多少筆訂單
    // 我們創造一個新的part_one_answer, 由 -1 結尾，並同時記錄product_num_of_machine
    for (int i = 0; i < machine_num; i++) {
        for (int j = 0; j < order_num; j++) {
            if (part_one_answer[i][j] == 1001 or part_one_answer[i][j] == 0){
                real_part_one_answer[i][j] = -1;   
            }
            else {
                real_part_one_answer[i][j] = part_one_answer[i][j];
                product_num_of_machine[i]++;
            }   
        }
    }
    
    // 此區域找出在哪一天維修並完成輸出
    int fixed_on_hour[1000] = {0}; // index表示小時，value表示在此小時有多少機台在維修
    for (int i = 0; i < machine_num; i++) {
        // 按照題目定義各種資料
        float a = machine_data[i][0];
        int b = machine_data[i][1];
        int c = machine_data[i][2];
        float p = machine_data[i][3];
        int T = kMaxDay;
        float L = machine_data[i][4];
        int n = product_num_of_machine[i];
        float q[500] = {0}; // index代表這個機台的第X個訂單，value代表此產品的數量
        int d[500] = {0}; // index代表這個機台的第X個訂單，value代表此產品的期限
        for (int j = 0; j < product_num_of_machine[i]; j++) {
            int product_id = real_part_one_answer[i][j]; // 把每個訂單的編號存到product_id
            q[j] = original_order_data_q[product_id - 1]; 
            d[j] = original_order_data_d[product_id - 1];
        }

        int temp_fix_product = -1; //預設修理日期會在哪個產品的開頭
        int temp_fix_day = find_best_fix_day(a, b, c, p, T, L, n, q, d, temp_fix_product); // 傳回修理日期
        //確認在該時段並沒有超過預定的人手
        bool is_segment_full = false;
        for (int k = 0; k < c; k++)
            if (fixed_on_hour[temp_fix_day + k] >= fixing_limit) {
                is_segment_full = true;
                break;
            }

        if (temp_fix_day == 0 || is_segment_full) { // 如果沒有修理或超出人手，單純輸出
            for (int j = 0; j < product_num_of_machine[i]; j++) {
                if (j == 0)
                    cout << real_part_one_answer[i][j];
                else 
                    cout << "," << real_part_one_answer[i][j];
            }
            cout << endl;
        }
        else { // 不然的話 1更新人手維修時間 2在維修的產品前加上M, 其他一樣輸出
            for (int j = 0; j < c; j++) {
                fixed_on_hour[temp_fix_day + j]++;
            }
            bool is_first = true;
            for (int j = 0; j < product_num_of_machine[i]; j++) {
                if (j == temp_fix_product) {
                    if (is_first) {
                        cout << "M";
                        is_first = false;
                    }
                    else 
                        cout << ",M";
                }
                
                if (is_first) {
                    cout << real_part_one_answer[i][j];
                    is_first = false;
                }
                else 
                    cout << "," << real_part_one_answer[i][j];
                
            }
            cout << endl;
        }
    }
    
    return 0;
}